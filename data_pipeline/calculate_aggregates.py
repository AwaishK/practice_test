"""This script pre computes aggregates
"""
import datetime
import pandas as pd
import numpy as np

from utils.database_connection import SetupDB


class CalculateAggregates:
    TABLE = "trading_data_aggregated_1min"

    def __init__(self, dt_from: datetime.datetime, dt_to: datetime.datetime) -> None:
        """
        Load raw data to postgres 
        :param dt_from (pd.Timestamp): datetime from which to load the data
        :param dt_to (pd.Timestamp): datetime up to which to load the data
        """

        self.dt_from = str(dt_from)
        self.dt_to = str(dt_to)
        self.db = SetupDB()
    
    def ensure_table_exists(self) -> None:
        """
        Ensures table exists in postgres, this table uses indexes to better perform queries. 
        As there are more queries to access data but minimal queries to update or modify, and more indexes will give more performace benefit 
        while accessing data.
        """
        query = Query.create_table.format(table=self.TABLE)
        self.db.query(query)

    def extract(self) -> pd.DataFrame:
        """
        Extracts the data from trading system
        
        Returns raw data
        """
        query = Query.get_data.format(dt_from=self.dt_from, dt_to=self.dt_to)
        df = self.db.recieve(query)
        return df
    
    def transform(self, df: pd.DataFrame) -> None:
        """
        Aggregates the data to calculate the average at one minute intervals 
        (in short time trading strategies at least 1 min interval for sampling data is used)

        Returns transformed dataframe to load to postgres
        """
        df["execution_time"] = df["execution_time"].dt.strftime("%Y-%m-%d %H:%M")
        df = df.groupby(
                by=["trade_id", "execution_time", "market", "product", "product_duration", "product_type"]
            ).agg({"price": np.mean, "volume": np.mean}).reset_index()
        
        return df

    def load(self, df: pd.DataFrame) -> None:
        """
        Load data to postgres
        :param df(pd.DataFrame) data to load
        """
        self.db.load_data_from_dataframe(df, table_name=self.TABLE)
    
    def run(self) -> None:
        print("processing aggregates")
        self.ensure_table_exists()

        df = self.extract()
        df = self.transform(df)
        self.load(df)


class Query:
    get_data = """
        select 
            trade_id,
            execution_time,
            price,
            volume,
            market,
            product,
            product_duration,
            product_type
        from trading_data.raw_data 
        where execution_time >= '{dt_from}' and execution_time < '{dt_to}'
    """

    create_table = """
        BEGIN;
        CREATE TABLE IF NOT EXISTS trading_data.{table} (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            trade_id integer not null,
            execution_time timestamp without time zone not null,
            price float not null,
            volume float not null,
            market varchar(2) not null,
            product varchar(11) not null,
            product_duration varchar(5)  not null,
            product_type varchar(5) not null
        );
        CREATE INDEX IF NOT EXISTS idx_trade_id ON {table}(trade_id);
        CREATE INDEX IF NOT EXISTS  idx_execution_time ON {table}(execution_time);
        CREATE INDEX IF NOT EXISTS  idx_market ON {table}(market);
        CREATE INDEX IF NOT EXISTS  idx_product ON {table}(product);
        CREATE INDEX IF NOT EXISTS  idx_product_duration ON {table}(product_duration);
        CREATE INDEX IF NOT EXISTS  idx_product_type ON {table}(product_type);
        COMMIT;
    """

